DECLARE @query_id INT = 53993316, @interval_start_time DATETIMEOFFSET = '2024-12-05 12:00:00', @interval_end_time DATETIMEOFFSET = '2024-12-05 14:00:00';

WITH bucketizer AS (
    SELECT
        rs.plan_id AS plan_id,
        rs.execution_type AS execution_type,
        SUM(rs.count_executions) count_executions,
        DATEADD(hh, (DATEDIFF(hh, 0, rs.last_execution_time)), 0) AS bucket_start,
        DATEADD(hh, (1 + DATEDIFF(hh, 0, rs.last_execution_time)), 0) AS bucket_end,
        ROUND(CONVERT(FLOAT, SUM(rs.avg_duration * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0)) * 0.001, 2) AS avg_duration,
        ROUND(CONVERT(FLOAT, MAX(rs.max_duration)) * 0.001, 2) AS max_duration,
        ROUND(CONVERT(FLOAT, MIN(rs.min_duration)) * 0.001, 2) AS min_duration,
        ROUND(CONVERT(FLOAT, SQRT(SUM(rs.stdev_duration * rs.stdev_duration * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0))), 2) AS stdev_duration,
        ISNULL(
            ROUND(
                CONVERT(
                    FLOAT,
                    SQRT(SUM(rs.stdev_duration * rs.stdev_duration * rs.count_executions) / NULLIF(SUM(rs.count_executions), 0)) -
                    NULLIF(SUM(rs.avg_duration * rs.count_executions), 0)
                ),
                2
            ),
            0
        ) AS variation_duration,
        ROUND(CONVERT(FLOAT, SUM(rs.avg_duration * rs.count_executions)) * 0.001, 2) AS total_duration
    FROM
        sys.query_store_runtime_stats rs
    JOIN
        sys.query_store_plan p ON p.plan_id = rs.plan_id
    WHERE
        p.query_id = @query_id
        AND NOT (rs.first_execution_time > @interval_end_time OR rs.last_execution_time < @interval_start_time)
    GROUP BY
        rs.plan_id,
        rs.execution_type,
        DATEDIFF(hh, 0, rs.last_execution_time)
),
is_forced AS (
    SELECT
        is_forced_plan,
        plan_id
    FROM
        sys.query_store_plan
)
SELECT
    b.plan_id AS plan_id,
    is_forced_plan,
    execution_type,
    count_executions,
    SWITCHOFFSET(bucket_start, DATEPART(tz, @interval_start_time)) AS bucket_start,
    SWITCHOFFSET(bucket_end, DATEPART(tz, @interval_start_time)) AS bucket_end,
    avg_duration,
    max_duration,
    min_duration,
    stdev_duration,
    variation_duration,
    total_duration
FROM
    bucketizer b
JOIN
    is_forced f ON f.plan_id = b.plan_id
ORDER BY
    b.count_executions DESC;
